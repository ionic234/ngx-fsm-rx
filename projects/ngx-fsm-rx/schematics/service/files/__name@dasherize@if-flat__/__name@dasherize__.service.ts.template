import { Injectable } from '@angular/core';
import { BaseStateData, CurrentStateInfo, FSMInit,<% if (statesToHook["onEnter"].length > 0){ %> OnEnterStateChanges,<% } %><% if (statesToHook["onLeave"].length > 0){ %> OnLeaveStateChanges,<% } %><% if (statesToHook["onUpdate"].length > 0){ %> OnUpdateStateChanges,<% } %> StateMap } from 'fsm-rx';
import { FsmRxInjectable } from 'ngx-fsm-rx';

export type <%= classify(name) %>States = "<%= fsmStates.join('" | "') %>";

interface Base<%= classify(name) %>Data extends BaseStateData<<%= classify(name) %>States> {
  // Data common to all states goes here
}
<% for (let i = 0; i < fsmStates.length; i++) { %>
interface <%= classify(name) %><%=classify(fsmStates[i]) %>Data extends Base<%= classify(name) %>Data {
  // Data unique to the "<%=classify(fsmStates[i]) %>" state goes here
}
<% } %>
export type <%= classify(name) %>Data = <% fsmStates.forEach((state, i)=>{ %><%= classify(name) %><%=classify(state) %>Data<% if (i !== fsmStates.length-1){ %> | <% } })%>;

export type <%= classify(name) %>CanLeaveToMap = {<% Object.keys(canLeaveTo).forEach((key) => { %>
  <%= key %>: "<%=canLeaveTo[key].join('" | "') %>";<% });%>
};

@Injectable({
  providedIn: 'root'
})
export class <%= classify(name) %>Service extends FsmRxInjectable<<%= classify(name) %>States, <%= classify(name) %>Data, <%= classify(name) %>CanLeaveToMap> {

  protected override stateMap: StateMap<<%= classify(name) %>States, <%= classify(name) %>Data, <%= classify(name) %>CanLeaveToMap> = {<% fsmStates.forEach((state, i)=>{ %> 
    <%= state %>: {
      canEnterFromStates: {<% const fromStates = []; Object.keys(canLeaveTo).forEach((key) => { if(canLeaveTo[key].includes(state)){ fromStates.push(key) }})%> <%= fromStates.join(": true, ") %>: true },
      canLeaveToStates: { <%= canLeaveTo[state].join(": true, ") %>: true },<% if (statesToHook["onEnter"].includes(state)) { %>
      onEnter: (changes: OnEnterStateChanges<<%= classify(name) %>States, "<%= state %>", <%= classify(name) %>Data, <%= classify(name) %>CanLeaveToMap>) => { 
        console.log("changes:", changes); 
      },<% } %><% if (statesToHook["onLeave"].includes(state)) { %>
      onLeave: (changes: OnLeaveStateChanges<<%= classify(name) %>States, "<%= state %>", <%= classify(name) %>Data, <%= classify(name) %>CanLeaveToMap>) => { 
        console.log("changes:", changes); 
      },<% } %><% if (statesToHook["onUpdate"].includes(state)) { %>
      onUpdate: (changes: OnUpdateStateChanges<<%= classify(name) %>States, "<%= state %>", <%= classify(name) %>Data, <%= classify(name) %>CanLeaveToMap>) => { 
        console.log("changes:", changes); 
      },<% } %>
    }<% if (i !== fsmStates.length-1){ %>,<% } }) %>
  };

  public constructor() {
    super();
    this.currentState$.subscribe((currentStateInfo: CurrentStateInfo<<%= classify(name) %>States, <%= classify(name) %>Data, <%= classify(name) %>CanLeaveToMap>) => {
      const { state } = currentStateInfo;
      if (state === "FSMInit") {
        this.changeState<FSMInit>({ state: "<%= canLeaveTo["FSMInit"][0] %>" });
      }
    });
  }

}